#ifndef INC_5E_MYSTRING_H
#define INC_5E_MYSTRING_H

#include <stdio.h>
#include <ctype.h>

#define MAX_STRING_SIZE 255

static char _string_buffer[MAX_STRING_SIZE + 1];

typedef struct WordDescriptor {
  char* begin;
  char* end;
} WordDescriptor;

/**
 * @brief   Поиск слова
 * @param begin_search  указатель на начало строки
 * @param word          адрес переменной, в которую будет записан результат
 *                      поиска
 * @return  1, если в строке есть слово, и 0 в противном случае
 */
int getWord(char* begin_search,
            WordDescriptor* word);

/**
 * @brief   Поиск слова в обратном порядке
 * @param r_begin_search    указатель на ячейку памяти, следующую после последнего
 *                          символа  строки
 * @param r_end_search      указатель на ячейку памяти, предшествующую. началу
 *                          строки
 * @param word              адрес переменной, в которую будет записан результат
 *                          поиска
 * @return  1, если в строке есть слово, и 0 в противном случае
 */
int getWordReverse(char* r_end_search,
                   char* r_begin_search,
                   WordDescriptor* word);

/**
 * @brief   Вычисление длины строки
 * @param begin указатель но начало строки
 * @return  количество символов в строке (включая пробельные символы и
 *          escape-последовательности)
 */
size_t mystrlen(char* begin);

/**
 * @brief   Поиск символа в строке на указанном диапазоне
 * @param begin указатель на начало диапазона поиска
 * @param end   указатель на конец диапазона поиска
 * @param ch    код искомого символа
 * @return  указатель на первый элемент на диапазоне [begin; end) с кодом
 *          ch, если такой элемент был найден, в противном
 *          случае возвращает значение end
 */
char* find(char* begin,
           char* end,
           int ch);

/**
 * @brief   Поиск непробельного символа
 * @param begin указатель на начало строки
 * @return  указатель на первый элемент, содержащий непробельный символ, если
 *          такой элемент был найден, в противном случае возвращает адрес
 *          первого \0-символа
 */
char* findNonSpace(char* begin);

/**
 * @brief   Поиск пробельного символа
 * @param begin указатель на начало строки
 * @return  указатель на первый элемент, содержащий пробельный символ, если
 *          такой элемент был найден, в противном случае возвращает адрес
 *          первого \0-символа
 */
char* findSpace(char* begin);

/**
 * @brief   Поиск непробельного символа
 * @param r_end     указатель символ, предшествующий началу строки
 * @param r_begin   указатель на последний символ в строке перед \0
 * @return  указатель на последний элемент, содержащий непробельный символ, если
 *          такой элемент был найден, в противном случае возвращает r_end
 */
char* findNonSpaceReverse(char* r_end,
                          char* r_begin);

/**
 * @brief   Поиск пробельного символа
 * @param r_end     указатель символ, предшествующий началу строки
 * @param r_begin   указатель на последний символ в строке перед \0
 * @return  указатель на последний элемент, содержащий пробельный символ, если
 *          такой элемент был найден, в противном случае возвращает r_end
 */
char* findSpaceReverse(char* r_end,
                       char* r_begin);

/**
 * @brief   Строковый компаратор
 * @param lhs указатель на начало первой строки
 * @param rhs указатель на начало второй строки
 * @return  разницу кодов между первыми несовпавшими символами в строках, если
 *          строки различны, и ноль в противном случае
 */
int mystrcmp(char* lhs,
             char* rhs);

/**
 * @brief   Копирование строки
 * @param begin_src     указатель на начало копируемой строки
 * @param end_src       указатель на ячейку памяти, соответсвующую концу
 *                      копируемой строки
 * @param begin_dst     указатель на начало области памяти, в которую
 *                      происходит запись копируемой строки
 * @return  указатель на ячейку памяти, следующую за последним скопированным
 *          элементом
 */
char* copy(char* begin_src,
           char* end_src,
           char* begin_dst);

/**
 * @brief   Копирование элементов строки, удовлетворяющих условию
 * @param begin_src     указатель на начало копируемой строки
 * @param end_src       указатель на ячейку памяти, соответсвующую концу
 *                      копируемой строки
 * @param begin_dst     указатель на начало области памяти, в которую
 *                      происходит запись копируемой строки
 * @param condition     указатель на функцию-предикат
 * @return  указатель на ячейку памяти, следующую за последним скопированным
 *          элементом
 */
char* copyIf(char* begin_src,
             char* end_src,
             char* begin_dst,
             int (* condition)(int));

/**
 * @brief   Копирование элементов строки, удовлетворяющих условию
 * @param r_end_src     указатель символ, предшествующий началу копируемой строки
 * @param r_begin_src   указатель на последний значимый символ в копируемой
 *                      строке
 * @param begin_dst     указатель на начало области памяти, в которую
 *                      происходит запись копируемой строки
 * @param condition     указатель на функцию-предикат
 * @return  указатель на ячейку памяти, следующую за последним скопированным
 *          элементом
 */
char* copyIfReverse(char* r_end_src,
                    char* r_begin_src,
                    char* begin_dst,
                    int (* condition)(int));

#endif // INC_5E_MYSTRING_H
